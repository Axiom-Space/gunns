/**
@file     GunnsOptimTest.cpp
@brief    GUNNS Optimization Test implementation

@copyright Copyright 2023 United States Government as represented by the Administrator of the
           National Aeronautics and Space Administration.  All Rights Reserved.

LIBRARY DEPENDENCY:
    ((core/optimization/GunnsOptimTest.o))
*/

/// - GUNNS includes:
#include "GunnsOptimTest.hh"
#include "core/GunnsMacros.hh"
#include "math/MsMath.hh"
#include "strings/Strings.hh"

/// - System includes:
#include <cfloat>
#include <iostream>
#include <sstream>
#include <fstream>
#include <stdexcept>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Default constructs this GUNNS Optimization Test configuration data.
////////////////////////////////////////////////////////////////////////////////////////////////////
GunnsOptimTestConfigData::GunnsOptimTestConfigData()
{
    // nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Default destructs this GUNNS Optimization Test configuration data.
////////////////////////////////////////////////////////////////////////////////////////////////////
GunnsOptimTestConfigData::~GunnsOptimTestConfigData()
{
    // nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Default constructs this GUNNS Optimization Test.
////////////////////////////////////////////////////////////////////////////////////////////////////
GunnsOptimTest::GunnsOptimTest()
    :
    GunnsOptimBase(),
    mNumRuns(0),
    mConfigCounter(),
    mInitCounter(0),
    mUpdateCounter(0),
    mShutdownCounter(0),
    mCost(0.0),
    mRunId(0.0),
    mRunIdReturned(0.0),
    mState(0)
{
    mName = "GunnsOptimTest";
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Default destructs this GUNNS Optimization Test.
////////////////////////////////////////////////////////////////////////////////////////////////////
GunnsOptimTest::~GunnsOptimTest()
{
    // nothing to do.
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] configData (--) not used.
///
/// @details  Increments the setConfigData calls counter.
////////////////////////////////////////////////////////////////////////////////////////////////////
void GunnsOptimTest::setConfigData(const GunnsOptimBaseConfigData* configData __attribute__((unused)))
{
    mConfigCounter++;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] inStatesMaster (--) Pointer to the MC input variables description.
///
/// @details  Increments the initialize calls counter.
////////////////////////////////////////////////////////////////////////////////////////////////////
void GunnsOptimTest::initialize(const std::vector<GunnsOptimMonteCarloInput>* inStatesMaster)
{
    mInitCounter++;
    mInStatesMaster = inStatesMaster;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Increments the update calls counter.
////////////////////////////////////////////////////////////////////////////////////////////////////
void GunnsOptimTest::update()
{
    mUpdateCounter++;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] cost          (--) The cost value to assign to the particle.
/// @param[in] runId         (--) Not used.
/// @param[in] runIdReturned (--) The run ID associated with this cost value.
///
/// @throws   std::runtime_error
///
/// @details  Sets the test object variables to the given values.
////////////////////////////////////////////////////////////////////////////////////////////////////
void GunnsOptimTest::assignCost(const double cost, const double runId, const double runIdReturned)
{
    mCost          = cost;
    mRunId         = runId;
    mRunIdReturned = runIdReturned;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @throws   std::runtime_error
///
/// @details  Increments the shutdown calls counter.
////////////////////////////////////////////////////////////////////////////////////////////////////
void GunnsOptimTest::shutdown()
{
    mShutdownCounter++;
}
