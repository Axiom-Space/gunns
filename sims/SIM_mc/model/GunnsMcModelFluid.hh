#ifndef GunnsMcModelFluid_EXISTS
#define GunnsMcModelFluid_EXISTS

/**
@file  GunnsMcModelFluid.hh
@brief GunnsMcModelFluid GUNNS Fluid Network declarations.

@copyright  Copyright 2023 United States Government as represented by the Administrator of the
            National Aeronautics and Space Administration. All Rights Reserved.


@details
PURPOSE: (Provides classes for the GunnsMcModelFluid GUNNS Fluid Network.)

REFERENCES:
  ()

ASSUMPTIONS AND LIMITATIONS:
  ()

LIBRARY DEPENDENCY:
  ((GunnsMcModelFluid.o))

PROGRAMMERS:
  ((Auto-generated by the GunnsDraw netexport script version 19.3.9) (2023-03-21 14:35:40.091484))

@{
*/

#include "software/SimCompatibility/TsSimCompatibility.hh"
#include "core/network/GunnsNetworkBase.hh"
#include "aspects/fluid/capacitor/GunnsFluidTank.hh"
#include "aspects/fluid/conductor/GunnsFluidValve.hh"
#include "core/GunnsFluidConductor.hh"

// Forward-declare the main network class for use in the config data.
class GunnsMcModelFluid;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Data structure for GunnsMcModelFluid GUNNS network mass fractions.
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct GunnsMcModelFluidFractions {
    double GUNNS_N2;
    double GUNNS_O2;
} GunnsMcModelFluidFractions;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Union for GunnsMcModelFluid GUNNS network mass fractions as scalars and as an array.
///         The array is used as an argument in the PolyFluidInputData constructor. 
////////////////////////////////////////////////////////////////////////////////////////////////////
union GunnsMcModelFluidMassFractions {
    GunnsMcModelFluidFractions scalar;
    double array[sizeof(GunnsMcModelFluidFractions)/sizeof(double)];
    GunnsMcModelFluidMassFractions(
        const double iGUNNS_N2,
        const double iGUNNS_O2);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    GunnsMcModelFluid GUNNS Network Config Data
///
/// @details  Configuration data class for the GunnsMcModelFluid Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
class GunnsMcModelFluidConfigData
{
    public:
        /// @brief  Enumeration of the number of internal constituent fluids in this network.
        enum {N_INTERNAL_FLUIDS = 2};
        // Network fluid configurations
        static FluidProperties::FluidType netInternalFluidTypes[GunnsMcModelFluidConfigData::N_INTERNAL_FLUIDS];    /**< (--) trick_chkpnt_io(**) Network internal fluid types array. */
        // Solver configuration data
        GunnsConfigData netSolver;    /**< (--) trick_chkpnt_io(**) Network solver config data. */ 
        // Spotters configuration data
        // Links configuration data
        GunnsFluidConductorConfigData conductor1;    /**< (--) trick_chkpnt_io(**) conductor1 config data. */
        GunnsFluidConductorConfigData conductor2;    /**< (--) trick_chkpnt_io(**) conductor2 config data. */
        GunnsFluidValveConfigData valve1;    /**< (--) trick_chkpnt_io(**) valve1 config data. */
        GunnsFluidValveConfigData valve2;    /**< (--) trick_chkpnt_io(**) valve2 config data. */
        GunnsFluidTankConfigData tank;    /**< (--) trick_chkpnt_io(**) tank config data. */
        GunnsFluidConductorConfigData conductor3;    /**< (--) trick_chkpnt_io(**) conductor3 config data. */
        /// @brief  Default constructs this network configuration data.
        GunnsMcModelFluidConfigData(const std::string& name, GunnsMcModelFluid* network);
        /// @brief  Default destructs this network configuration data.
        virtual ~GunnsMcModelFluidConfigData();

    private:
        /// @details  Copy constructor unavailable since declared private and not implemented.
        GunnsMcModelFluidConfigData(const GunnsMcModelFluidConfigData&);
        /// @details  Assignment operator unavailable since declared private and not implemented.
        GunnsMcModelFluidConfigData& operator =(const GunnsMcModelFluidConfigData&);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    GunnsMcModelFluid GUNNS Network Input Data
///
/// @details  Input data class for the GunnsMcModelFluid Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
class GunnsMcModelFluidInputData
{
    public:
        // Internal network fluids
        GunnsMcModelFluidMassFractions fluidDefaultFractions;    /**< (--) trick_chkpnt_io(**) Fluid mass fractions. */
        PolyFluidInputData fluidDefault;    /**< (--) trick_chkpnt_io(**) Fluid input data. */
        // Spotters input data
        // Links input data
        GunnsFluidConductorInputData conductor1;    /**< (--) trick_chkpnt_io(**) conductor1 input data. */
        GunnsFluidConductorInputData conductor2;    /**< (--) trick_chkpnt_io(**) conductor2 input data. */
        GunnsFluidValveInputData valve1;    /**< (--) trick_chkpnt_io(**) valve1 input data. */
        GunnsFluidValveInputData valve2;    /**< (--) trick_chkpnt_io(**) valve2 input data. */
        GunnsFluidTankInputData tank;    /**< (--) trick_chkpnt_io(**) tank input data. */
        GunnsFluidConductorInputData conductor3;    /**< (--) trick_chkpnt_io(**) conductor3 input data. */
        /// @brief  Default constructs this network input data.
        GunnsMcModelFluidInputData(GunnsMcModelFluid* network);
        /// @brief  Default destructs this network input data.
        virtual ~GunnsMcModelFluidInputData();

    private:
        /// @details  Copy constructor unavailable since declared private and not implemented.
        GunnsMcModelFluidInputData(const GunnsMcModelFluidInputData&);
        /// @details  Assignment operator unavailable since declared private and not implemented.
        GunnsMcModelFluidInputData& operator =(const GunnsMcModelFluidInputData&);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    GunnsMcModelFluid GUNNS Network
///
/// @details  Main class for the GunnsMcModelFluid Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
class GunnsMcModelFluid : public GunnsNetworkBase
{
    TS_MAKE_SIM_COMPATIBLE(GunnsMcModelFluid);
    public:
        /// @brief  Enumeration of the GunnsMcModelFluid Network nodes.
        enum Nodes
        {
            Node0 = 0,    ///< Node 0
            Node1 = 1,    ///< Node 1
            Node2 = 2,    ///< Node 2
            GROUND = 3,    ///< Ground Node
            N_NODES = 4    ///< Number of nodes including Ground
        };
        // Network declarations
        GunnsFluidNode netNodes[GunnsMcModelFluid::N_NODES];    /**< (--) Network nodes array. */
        GunnsMcModelFluidConfigData netConfig;    /**< (--) trick_chkpnt_io(**) Network config data. */
        GunnsMcModelFluidInputData netInput;    /**< (--) trick_chkpnt_io(**) Network input data. */
        const DefinedFluidProperties netFluidProperties;        /**< (--) trick_chkpnt_io(**) Network defined fluid properties. */
        PolyFluidConfigData          netInternalFluidConfig;    /**< (--) trick_chkpnt_io(**) Network internal fluid config. */
        // Data Tables
        // Spotters
        // Links
        GunnsFluidConductor conductor1;    /**< (--) conductor1 instance. */
        GunnsFluidConductor conductor2;    /**< (--) conductor2 instance. */
        GunnsFluidValve valve1;    /**< (--) valve1 instance. */
        GunnsFluidValve valve2;    /**< (--) valve2 instance. */
        GunnsFluidTank tank;    /**< (--) tank instance. */
        GunnsFluidConductor conductor3;    /**< (--) conductor3 instance. */
        /// @brief  Default constructs this network.
        GunnsMcModelFluid(const std::string& name = "");
        /// @brief  Default destructs this network.
        virtual ~GunnsMcModelFluid();
        /// @brief  Network nodes initialization task.
        virtual void initNodes(const std::string& name);
        /// @brief  Network links & spotters initialization task.
        virtual void initNetwork();
        /// @brief  Update network spotters before the solver solution.
        virtual void stepSpottersPre(const double timeStep);
        /// @brief  Update network spotters after the solver solution.
        virtual void stepSpottersPost(const double timeStep);
        /// @brief  Returns this network's fluid configuration.
        virtual const PolyFluidConfigData* getFluidConfig() const;

    private:
        /// @details  Copy constructor unavailable since declared private and not implemented.
        GunnsMcModelFluid(const GunnsMcModelFluid&);
        /// @details  Assignment operator unavailable since declared private and not implemented.
        GunnsMcModelFluid& operator =(const GunnsMcModelFluid&);
};

/// @}  

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @returns  PolyFluidConfigData* (--) Pointer to this network's fluid configuration.
///
/// @details  Returns this network's fluid configuration.
////////////////////////////////////////////////////////////////////////////////////////////////////
inline const PolyFluidConfigData* GunnsMcModelFluid::getFluidConfig() const
{
    return &netInternalFluidConfig;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] iGUNNS_N2 (--) Mass fraction of the GUNNS_N2 constituent in the composite fluid.
/// @param[in] iGUNNS_O2 (--) Mass fraction of the GUNNS_O2 constituent in the composite fluid.
///
/// @details  Constructs the mass fraction union from the scalar mass fraction arguments.
////////////////////////////////////////////////////////////////////////////////////////////////////
inline GunnsMcModelFluidMassFractions::GunnsMcModelFluidMassFractions (
    const double iGUNNS_N2,
    const double iGUNNS_O2)
{
    scalar.GUNNS_N2 = iGUNNS_N2;
    scalar.GUNNS_O2 = iGUNNS_O2;
}

#endif
