/* @copyright Copyright 2023 United States Government as represented by the Administrator of the
              National Aeronautics and Space Administration.  All Rights Reserved. */
           
#define P_LOG P1
#define MODEL_TIMESTEP 0.1

// Default system classes
#include "sim_objects/default_trick_sys.sm"

##include "core/optimization/GunnsOptimMonteCarlo.hh"
##include "model/GunnsMcModelFluid.hh"

class GunnsMcSimObject : public Trick::SimObject
{
    public:
        GunnsOptimMonteCarlo monteCarlo;
        GunnsMcModelFluid model;

        GunnsMcSimObject()
        {
            ("initialization")            model.initialize();
            (MODEL_TIMESTEP, "scheduled") monteCarlo.updateSlaveInputs();  // this should preceed model updates
            (MODEL_TIMESTEP, "scheduled") model.update(MODEL_TIMESTEP);
            (MODEL_TIMESTEP, "scheduled") monteCarlo.updateSlaveOutputs(); // this should follow model updates
            ("monte_slave_init")          monteCarlo.initSlave();
            ("monte_slave_pre")           monteCarlo.updateSlavePre();
            ("monte_slave_post")          monteCarlo.updateSlavePost();
            ("monte_master_init")         monteCarlo.initMaster();
            ("monte_master_pre")          monteCarlo.updateMasterPre();
            ("monte_master_post")         monteCarlo.updateMasterPost();
            ("monte_master_shutdown")     monteCarlo.updateMasterShutdown();
        }
    private:
        // Copy constructor unavailable since declared private and not implemented.
        GunnsMcSimObject(const GunnsMcSimObject&);
        // Assignment operator unavailable since declared private and not implemented.
        GunnsMcSimObject operator = (const GunnsMcSimObject&);
};

GunnsMcSimObject mc;
